Future Backlog
>> create flask or TK config GUI for setup and settings changes. 
>> modify psql_setup for cross platform compatibilty

Thrid Sprint 10/23
Primary Goal: Establish I/O between settings page and database

Requirements:
1) Design settings HTML page.
2) Make classSettings.py load config settings from db.
3) Make SQL script to handle Database updates. 
4) Rework setup process to detect OS and adjust postgresql setup accordingly.
5) Start connecting scripts via main.py

Second Sprint 10/15-10/23 2025
Primary Goal: Create setup files in order for user to create and configure database

Requirements:
1) Shell script to initialize databases on install
2) Use variables to make shell script configurable
3) Begin design of database structure
4) Allow databases to be named via variables
5) Keep in mind that config will eventually come from flask

Review:
1) It will be better modularity to split shell and sql setup into seperate scripts
2) While using variables was a good idea this is not a user facing part of the app so generaic naming conventions assures better compatibilty across different users
3) Database structure designed, three many-to-many db (people, roles, timesheet) an additional config db needed
4) Requirement changed see #2
5) Converted config to be created in createDB.sql. Need to edit it from Flask commandlets.
* while splitting psql_setup.sh realized that I need to add cross compatibilty for chrome/linux/windows 
* may need to add to psql_setup.sh to handle privilages and different enviorments.
* reduced number of tables to 3, seperate roles table was slow. simplified and eleminated vertical repition in tables.
* added a clean install option to allow user to choose how to deal with a previously installed data.

First Sprint 10/12-10/15 2025
Primary Goal: Basic functionality of Flask


Requirements:
1) HTML CSS Python handshake
2) Establish architecural principals and basic templates.
3) Flask should put up an index page showing a text box as well as feedback information boxes for when database returns information.
4) Create a python object which can hold the neccecary data to send to Flask
5) Keep in mind modularity and cross language configurability. 

Review:
1) Using Flask seems to be an effient way mostly due to Python's compatibilty with JSON. May require more complexity when intergrating POSTGRE
2) Created basic architecural plan in main.py. 
3) Created HTML and CSS templates. Using variables for CSS attributes was easier than expected. 
4) person.py created with outline of attributes needed from database
5) In order to configure as many settings that are required it looks like a second webpage or TK app may be needed to give user GUI configuration ADD to requirements
